/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.dc2f.lsp

import org.eclipse.lsp4j.launch.LSPLauncher
import java.io.*
import java.net.*
import java.nio.channels.*
import kotlin.concurrent.thread

private val logger = mu.KotlinLogging.logger {}

fun startServer(input: InputStream, out: OutputStream) {
    thread {
        logger.debug { "Starting server ..." }
        val server = Dc2fLanguageServer()
        val launcher = LSPLauncher.createServerLauncher(
            server,
            input,
            out
        )
        server.connect(launcher.remoteProxy)
        logger.debug { "startListening() ..." }
        launcher.startListening().get()
        logger.debug { "finished listening." }

    }
}

fun main(args: Array<String>) {

//    if (true) {
//        startServer(System.`in`, System.out)
//
//        return
//    }

    val serverSocket = ServerSocket(5007)
    while (true) {
        logger.info("Listening on ${serverSocket.inetAddress} ...")
        val socket = serverSocket.accept()
        logger.debug { "Connected." }
        startServer(socket.getInputStream(), socket.getOutputStream())
    }

//    val serverSocket = ServerSocketChannel.open()
//    val inetSocketAddress = InetSocketAddress("localhost", 5007)
//    serverSocket.bind(inetSocketAddress)
//    while (true) {
//        logger.info("Listening on $inetSocketAddress ...")
//        val socketChannel = serverSocket.accept()
//        logger.debug { "Connected." }
//        val input = Channels.newInputStream(socketChannel)
//        val out = Channels.newOutputStream(socketChannel)
//        startServer(input, out)
//    }
}
